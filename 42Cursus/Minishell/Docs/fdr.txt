Feuille de route pour le projet Minishell de l'école 42

1. Compréhension du sujet :
   - Lire attentivement l'énoncé du projet.
   - Identifier les fonctionnalités clés à implémenter.

2. Recherche préliminaire :
   - Effectuer des recherches sur les concepts de base des shells Unix.
   - Se familiariser avec les commandes de base (comme cd, ls, pwd, etc.).
   - Comprendre le fonctionnement de la création de processus et de la gestion des flux.

3. Planification initiale :
   - Diviser le projet en tâches distinctes et définir des objectifs clairs.
   - Estimer le temps nécessaire pour chaque tâche.

4. Configuration de l'environnement de développement :
   - Installer un compilateur C (par exemple, gcc) et un éditeur de texte.
   - Configurer un environnement de développement pour travailler avec des fichiers source C.

5. Parsing des commandes :
   - Implémenter le parsing des commandes entrées par l'utilisateur.
   - Diviser les commandes en tokens pour une analyse ultérieure.
   - Gérer les opérateurs de redirection (>, <, |) et leurs arguments.

6. Analyse des commandes :
   - Interpréter les commandes analysées pour déterminer l'action à entreprendre.
   - Identifier les commandes système à exécuter.
   - Traiter les variables d'environnement et les chemins absolus ou relatifs.

7. Exécution des commandes :
   - Créer une boucle de commande pour lire les entrées de l'utilisateur.
   - Exécuter les commandes système identifiées lors de l'analyse.
   - Gérer les processus enfants et la redirection des flux de données.

8. Gestion des erreurs :
   - Ajouter des mécanismes de gestion des erreurs pour détecter et signaler les erreurs d'exécution.

9. Tests et débogage :
   - Créer un ensemble de tests pour chaque fonctionnalité implémentée.
   - Effectuer des tests approfondis pour s'assurer que le shell fonctionne correctement dans différentes situations.
   - Déboguer les erreurs et les bogues rencontrés pendant les tests.

10. Optimisation et améliorations :
   - Identifier les zones de code pouvant être optimisées.
   - Revoir et améliorer la qualité du code.
   - Ajouter des fonctionnalités supplémentaires pour enrichir l'expérience utilisateur.

11. Documentation :
   - Documenter le code source pour faciliter la compréhension et la maintenance.
   - Rédiger un guide d'utilisation pour les utilisateurs finaux.

12. Finalisation et soumission :
   - Effectuer une dernière vérification de qualité.
   - Préparer les fichiers de soumission conformément aux directives de l'école.
   - Soumettre le projet avant la date limite.

13. Révision post-projet :
   - Recevoir et intégrer les commentaires des évaluateurs.
   - Analyser les points forts et faibles du projet pour en tirer des leçons.
